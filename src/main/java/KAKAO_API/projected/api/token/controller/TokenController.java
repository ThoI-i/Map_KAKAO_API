package KAKAO_API.projected.api.token.controller;

import KAKAO_API.projected.auth.jwt.JwtTokenProvider;
import KAKAO_API.projected.auth.jwt.RedisTokenService;
import KAKAO_API.projected.api.token.dto.response.TokenResponse;
import lombok.RequiredArgsConstructor;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;

@RestController
@RequiredArgsConstructor
@RequestMapping("/api/token")
public class TokenController {

    private final JwtTokenProvider jwtTokenProvider;
    private final RedisTokenService redisTokenService;

    // üéØ ÌÜ†ÌÅ∞ Ïû¨Î∞úÍ∏â API
    @PostMapping("/refresh")
    public ResponseEntity<TokenResponse> refresh(@RequestHeader("Authorization") String refreshTokenHeader) {

        // 1. Ìó§ÎçîÏóêÏÑú "Bearer " Ï†ëÎëêÏÇ¨ Ï†úÍ±∞
        String refreshToken = refreshTokenHeader.replace("Bearer ", "");

        // 2. ÌÜ†ÌÅ∞ Ïú†Ìö®ÏÑ± Í≤ÄÏÇ¨
        if (!jwtTokenProvider.validateToken(refreshToken)) {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).build(); // ‚ùå Ïú†Ìö®ÌïòÏßÄ ÏïäÏùå
        }

        // 3. ÏÇ¨Ïö©Ïûê ID Ï∂îÏ∂ú
        String userId = jwtTokenProvider.getUserIdFromToken(refreshToken);

        // 4. RedisÏóêÏÑú Ï†ÄÏû•Îêú RefreshToken Î∂àÎü¨Ïò§Í∏∞
        String savedRefreshToken = redisTokenService.getRefreshToken(userId);

        // 5. Ï†ÄÏû•Îêú ÌÜ†ÌÅ∞Í≥º ÎπÑÍµê
        if (!refreshToken.equals(savedRefreshToken)) {
            return ResponseEntity.status(HttpStatus.UNAUTHORIZED).build(); // ‚ùå ÏúÑÏ°∞ ÎòêÎäî ÎßåÎ£å
        }

        // 6. Access Token ÏÉàÎ°ú Î∞úÍ∏â
        String newAccessToken = jwtTokenProvider.createAccessToken(userId);

        // 7. 3ÏãúÍ∞Ñ Ïù¥ÏÉÅ Í≤ΩÍ≥º Ïãú RefreshTokenÎèÑ Ïû¨Î∞úÍ∏â
        long lastSavedTime = redisTokenService.getLastSavedTime(userId);
        long now = System.currentTimeMillis();
        String newRefreshToken = refreshToken; // Í∏∞Î≥∏ÏùÄ Í∑∏ÎåÄÎ°ú ÏÇ¨Ïö©

        if (now - lastSavedTime >= 3 * 60 * 60 * 1000) {
            newRefreshToken = jwtTokenProvider.createRefreshToken();
            redisTokenService.saveRefreshToken(userId, newRefreshToken); // RedisÎèÑ Í∞±Ïã†!
        }
        // 8. ÏùëÎãµ
        return ResponseEntity.ok(new TokenResponse(newAccessToken, newRefreshToken));
    }
}
